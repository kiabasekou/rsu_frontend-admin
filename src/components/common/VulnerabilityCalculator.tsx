import React, { useEffect, useState } from 'react';
import {
  Box,
  Typography,
  Paper,
  LinearProgress,
  Chip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Alert,
} from '@mui/material';
import {
  Assessment,
  CheckCircle,
  Warning,
  Error,
  Info,
} from '@mui/icons-material';

interface VulnerabilityCalculatorProps {
  age?: number | null;
  hasPhoto?: boolean;
  hasPhone?: boolean;
  province?: string;
  city?: string;
  onScoreCalculate: (score: number | null) => void;
}

interface VulnerabilityFactor {
  label: string;
  score: number;
  weight: number;
  status: 'positive' | 'neutral' | 'negative';
  description: string;
}

export const VulnerabilityCalculator: React.FC<VulnerabilityCalculatorProps> = ({
  age,
  hasPhoto = false,
  hasPhone = false,
  province,
  city,
  onScoreCalculate,
}) => {
  const [score, setScore] = useState<number | null>(null);
  const [factors, setFactors] = useState<VulnerabilityFactor[]>([]);

  useEffect(() => {
    calculateVulnerabilityScore();
  }, [age, hasPhoto, hasPhone, province, city]);

  const calculateVulnerabilityScore = () => {
    const newFactors: VulnerabilityFactor[] = [];

    // Facteur âge
    if (age !== null && age !== undefined) {
      let ageScore = 0;
      let ageStatus: 'positive' | 'neutral' | 'negative' = 'neutral';
      let ageDescription = '';

      if (age < 25) {
        ageScore = 15;
        ageStatus = 'negative';
        ageDescription = 'Jeune adulte - risque de précarité économique';
      } else if (age >= 60) {
        ageScore = 20;
        ageStatus = 'negative';
        ageDescription = 'Senior - besoins de santé accrus';
      } else {
        ageScore = 5;
        ageStatus = 'positive';
        ageDescription = 'Âge actif - stabilité relative';
      }

      newFactors.push({
        label: `Âge: ${age} ans`,
        score: ageScore,
        weight: 0.25,
        status: ageStatus,
        description: ageDescription,
      });
    }

    // Facteur documentation
    const documentationScore = hasPhoto ? 0 : 15;
    newFactors.push({
      label: 'Documentation',
      score: documentationScore,
      weight: 0.15,
      status: hasPhoto ? 'positive' : 'negative',
      description: hasPhoto 
        ? 'Photo d\'identité disponible' 
        : 'Aucune photo - difficultés d\'identification',
    });

    // Facteur communication
    const communicationScore = hasPhone ? 0 : 10;
    newFactors.push({
      label: 'Communication',
      score: communicationScore,
      weight: 0.15,
      status: hasPhone ? 'positive' : 'negative',
      description: hasPhone 
        ? 'Téléphone disponible - contact facilité' 
        : 'Pas de téléphone - difficultés de contact',
    });

    // Facteur géographique
    let geoScore = 5; // Score par défaut
    let geoStatus: 'positive' | 'neutral' | 'negative' = 'neutral';
    let geoDescription = 'Zone non spécifiée';

    if (province && city) {
      // Zones rurales = score plus élevé
      const ruralProvinces = ['Ngounié', 'Nyanga', 'Ogooué-Lolo', 'Woleu-Ntem'];
      const urbanCities = ['Libreville', 'Port-Gentil', 'Franceville', 'Oyem'];

      if (ruralProvinces.includes(province) && !urbanCities.includes(city)) {
        geoScore = 20;
        geoStatus = 'negative';
        geoDescription = 'Zone rurale - accès limité aux services';
      } else if (province === 'Estuaire' && city === 'Libreville') {
        geoScore = 0;
        geoStatus = 'positive';
        geoDescription = 'Zone urbaine centrale - accès facilité';
      } else {
        geoScore = 10;
        geoStatus = 'neutral';
        geoDescription = 'Zone semi-urbaine';
      }
    }

    newFactors.push({
      label: 'Localisation géographique',
      score: geoScore,
      weight: 0.25,
      status: geoStatus,
      description: geoDescription,
    });

    // Calcul du score final pondéré
    const totalWeightedScore = newFactors.reduce((sum, factor) => {
      return sum + (factor.score * factor.weight);
    }, 0);

    // Normalisation sur 100
    const normalizedScore = Math.min(100, Math.round(totalWeightedScore));

    setFactors(newFactors);
    setScore(normalizedScore);
    onScoreCalculate(normalizedScore);
  };

  const getScoreColor = (score: number) => {
    if (score >= 70) return 'error';
    if (score >= 40) return 'warning';
    if (score >= 20) return 'info';
    return 'success';
  };

  const getScoreLabel = (score: number) => {
    if (score >= 70) return 'Très vulnérable';
    if (score >= 40) return 'Vulnérable';
    if (score >= 20) return 'Peu vulnérable';
    return 'Non vulnérable';
  };

  const getFactorIcon = (status: 'positive' | 'neutral' | 'negative') => {
    switch (status) {
      case 'positive':
        return <CheckCircle color="success" />;
      case 'negative':
        return <Error color="error" />;
      default:
        return <Info color="info" />;
    }
  };

  if (score === null) {
    return (
      <Paper sx={{ p: 2 }}>
        <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Assessment color="primary" />
          Score de Vulnérabilité
        </Typography>
        <Alert severity="info">
          Remplissez les informations pour calculer le score de vulnérabilité
        </Alert>
      </Paper>
    );
  }

  return (
    <Paper sx={{ p: 2 }}>
      <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Assessment color="primary" />
        Score de Vulnérabilité
      </Typography>

      <Box sx={{ mb: 3 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>
          <Typography variant="h4" color={`${getScoreColor(score)}.main`}>
            {score}%
          </Typography>
          <Chip
            label={getScoreLabel(score)}
            color={getScoreColor(score)}
            size="medium"
          />
        </Box>
        <LinearProgress
          variant="determinate"
          value={score}
          color={getScoreColor(score)}
          sx={{ height: 8, borderRadius: 1 }}
        />
      </Box>

      <Typography variant="subtitle2" gutterBottom>
        Facteurs d'évaluation:
      </Typography>

      <List dense>
        {factors.map((factor, index) => (
          <ListItem key={index} sx={{ py: 0.5 }}>
            <ListItemIcon sx={{ minWidth: 32 }}>
              {getFactorIcon(factor.status)}
            </ListItemIcon>
            <ListItemText
              primary={
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <Typography variant="body2">{factor.label}</Typography>
                  <Typography variant="caption" color="text.secondary">
                    +{Math.round(factor.score * factor.weight)}pts
                  </Typography>
                </Box>
              }
              secondary={
                <Typography variant="caption" color="text.secondary">
                  {factor.description}
                </Typography>
              }
            />
          </ListItem>
        ))}
      </List>

      <Alert 
        severity={score >= 40 ? 'warning' : 'info'} 
        sx={{ mt: 2 }}
        icon={score >= 40 ? <Warning /> : <Info />}
      >
        <Typography variant="body2">
          {score >= 70 && 'Cette personne présente un niveau de vulnérabilité élevé et devrait être priorisée pour les programmes d\'aide.'}
          {score >= 40 && score < 70 && 'Cette personne présente une vulnérabilité modérée et pourrait bénéficier de programmes de soutien.'}
          {score < 40 && 'Cette personne présente un niveau de vulnérabilité faible mais peut tout de même être éligible à certains programmes.'}
        </Typography>
      </Alert>
    </Paper>
  );
};
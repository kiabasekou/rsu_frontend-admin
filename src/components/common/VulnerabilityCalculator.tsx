// src/components/common/VulnerabilityCalculator.tsx
import React, { useEffect, useState } from 'react';
import {
  Card, CardContent, Typography, LinearProgress,
  Chip, Box, Accordion, AccordionSummary, AccordionDetails
} from '@mui/material';
import { ExpandMore, TrendingUp, TrendingDown, Remove } from '@mui/icons-material';

interface VulnerabilityCalculatorProps {
  personData: any;
  onScoreUpdate: (score: number) => void;
}

interface VulnerabilityCriteria {
  id: string;
  name: string;
  weight: number;
  calculate: (data: any) => { score: number; reason: string };
}

const VULNERABILITY_CRITERIA: VulnerabilityCriteria[] = [
  {
    id: 'age',
    name: '√Çge',
    weight: 0.2,
    calculate: (data) => {
      if (!data.dateOfBirth) return { score: 0, reason: '√Çge non renseign√©' };
      
      const age = new Date().getFullYear() - new Date(data.dateOfBirth).getFullYear();
      if (age < 18) return { score: 80, reason: 'Mineur' };
      if (age > 65) return { score: 70, reason: 'Senior' };
      if (age < 25) return { score: 40, reason: 'Jeune adulte' };
      return { score: 20, reason: '√Çge actif' };
    }
  },
  {
    id: 'location',
    name: 'Localisation g√©ographique',
    weight: 0.25,
    calculate: (data) => {
      const ruralProvinces = ['Nyanga', 'Ogoou√©-Lolo', 'Ogoou√©-Ivindo'];
      const semiUrbanProvinces = ['Haut-Ogoou√©', 'Moyen-Ogoou√©', 'Ngouni√©'];
      
      if (ruralProvinces.includes(data.province)) {
        return { score: 60, reason: 'Zone rurale isol√©e' };
      }
      if (semiUrbanProvinces.includes(data.province)) {
        return { score: 35, reason: 'Zone semi-urbaine' };
      }
      return { score: 15, reason: 'Zone urbaine' };
    }
  },
  {
    id: 'gender',
    name: 'Genre et statut social',
    weight: 0.15,
    calculate: (data) => {
      if (data.gender === 'F') {
        return { score: 45, reason: 'Femme (vuln√©rabilit√© sociale)' };
      }
      return { score: 20, reason: 'Homme' };
    }
  },
  {
    id: 'documentation',
    name: 'Documentation',
    weight: 0.1,
    calculate: (data) => {
      let score = 0;
      let reasons = [];
      
      if (!data.nationalId || data.nationalId.length !== 12) {
        score += 40;
        reasons.push('CNI manquante/invalide');
      }
      if (!data.phoneNumber) {
        score += 30;
        reasons.push('T√©l√©phone manquant');
      }
      if (!data.address) {
        score += 20;
        reasons.push('Adresse incompl√®te');
      }
      
      return { 
        score: Math.min(score, 100), 
        reason: reasons.length > 0 ? reasons.join(', ') : 'Documentation compl√®te' 
      };
    }
  },
  {
    id: 'connectivity',
    name: 'Connectivit√© num√©rique',
    weight: 0.15,
    calculate: (data) => {
      if (!data.email && !data.phoneNumber) {
        return { score: 80, reason: 'Aucun moyen de contact digital' };
      }
      if (!data.email) {
        return { score: 50, reason: 'Pas d\'email' };
      }
      return { score: 15, reason: 'Bien connect√©' };
    }
  },
  {
    id: 'location_precision',
    name: 'Pr√©cision g√©ographique',
    weight: 0.15,
    calculate: (data) => {
      if (!data.coordinates) {
        return { score: 60, reason: 'Position GPS non d√©finie' };
      }
      if (!data.address || data.address.length < 10) {
        return { score: 40, reason: 'Adresse impr√©cise' };
      }
      return { score: 10, reason: 'Localisation pr√©cise' };
    }
  }
];

export const VulnerabilityCalculator: React.FC<VulnerabilityCalculatorProps> = ({
  personData,
  onScoreUpdate
}) => {
  const [criteriaScores, setCriteriaScores] = useState<Array<{
    criteria: VulnerabilityCriteria;
    score: number;
    reason: string;
    weightedScore: number;
  }>>([]);
  const [totalScore, setTotalScore] = useState(0);
  const [expanded, setExpanded] = useState(false);

  useEffect(() => {
    const scores = VULNERABILITY_CRITERIA.map(criteria => {
      const result = criteria.calculate(personData);
      const weightedScore = result.score * criteria.weight;
      
      return {
        criteria,
        score: result.score,
        reason: result.reason,
        weightedScore
      };
    });

    setCriteriaScores(scores);
    
    const total = Math.round(scores.reduce((sum, item) => sum + item.weightedScore, 0));
    setTotalScore(total);
    onScoreUpdate(total);
  }, [personData, onScoreUpdate]);

  const getScoreColor = (score: number) => {
    if (score >= 70) return 'error';
    if (score >= 40) return 'warning';
    return 'success';
  };

  const getScoreIcon = (score: number) => {
    if (score >= 70) return <TrendingUp />;
    if (score >= 40) return <Remove />;
    return <TrendingDown />;
  };

  const getScoreLabel = (score: number) => {
    if (score >= 70) return '√âlev√©e';
    if (score >= 40) return 'Mod√©r√©e';
    return 'Faible';
  };

  return (
    <Card variant="outlined">
      <CardContent>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
          <Typography variant="h6">
            Score de Vuln√©rabilit√©
          </Typography>
          <Chip
            icon={getScoreIcon(totalScore)}
            label={`${totalScore}/100 - ${getScoreLabel(totalScore)}`}
            color={getScoreColor(totalScore) as any}
            variant="outlined"
          />
        </Box>

        <LinearProgress
          variant="determinate"
          value={totalScore}
          color={getScoreColor(totalScore) as any}
          sx={{ height: 8, borderRadius: 4, mb: 2 }}
        />

        <Accordion expanded={expanded} onChange={(_, isExpanded) => setExpanded(isExpanded)}>
          <AccordionSummary expandIcon={<ExpandMore />}>
            <Typography variant="body2">
              D√©tail par crit√®re ({criteriaScores.length} crit√®res analys√©s)
            </Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
              {criteriaScores.map(({ criteria, score, reason, weightedScore }) => (
                <Box key={criteria.id}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                    <Typography variant="body2" fontWeight="medium">
                      {criteria.name}
                    </Typography>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Typography variant="caption" color="text.secondary">
                        Poids: {Math.round(criteria.weight * 100)}%
                      </Typography>
                      <Chip
                        label={`${score}/100`}
                        size="small"
                        color={getScoreColor(score) as any}
                        variant="outlined"
                      />
                    </Box>
                  </Box>
                  
                  <LinearProgress
                    variant="determinate"
                    value={score}
                    color={getScoreColor(score) as any}
                    sx={{ height: 4, borderRadius: 2, mb: 1 }}
                  />
                  
                  <Typography variant="caption" color="text.secondary">
                    {reason} (Impact: +{Math.round(weightedScore)} points)
                  </Typography>
                </Box>
              ))}
            </Box>
          </AccordionDetails>
        </Accordion>

        <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
          <Typography variant="caption" color="text.secondary">
            üí° <strong>Interpr√©tation :</strong>
            {totalScore >= 70 && ' Cette personne pr√©sente un profil de haute vuln√©rabilit√© et devrait √™tre prioritaire pour les programmes sociaux.'}
            {totalScore >= 40 && totalScore < 70 && ' Cette personne pr√©sente une vuln√©rabilit√© mod√©r√©e et pourrait b√©n√©ficier de certains programmes d\'aide.'}
            {totalScore < 40 && ' Cette personne pr√©sente une vuln√©rabilit√© faible selon les crit√®res analys√©s.'}
          </Typography>
        </Box>
      </CardContent>
    </Card>
  );
};